/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.view.panel;

import domain.Cuisine;
import domain.Restaurant;
import exception.CommunicationException;
import java.util.LinkedList;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import ui.controller.ControllerRestaurantsSearch;
import ui.view.components.TableModelRestaurants;

/**
 *
 * @author jeca
 */
public class JPanelRestaurantSearch extends javax.swing.JPanel {

    private ControllerRestaurantsSearch controller;

    /**
     * Creates new form JPanelRestaurantSearch
     */
    public JPanelRestaurantSearch() {
        controller = ControllerRestaurantsSearch.getInstance();
        initComponents();
        prepareForm();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtxtName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jcboxPetsAllowed = new javax.swing.JCheckBox();
        jcboxNonSmoking = new javax.swing.JCheckBox();
        jcmbboxCuisine = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtableRestaurants = new javax.swing.JTable();
        btnRemoveFilters = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Pretraga restorana"));

        jtxtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtNameKeyReleased(evt);
            }
        });

        jLabel8.setText("Naziv restorana:");

        jcboxPetsAllowed.setText("Dozvoljeni ljubimci");
        jcboxPetsAllowed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcboxPetsAllowedActionPerformed(evt);
            }
        });

        jcboxNonSmoking.setText("Nepušački");
        jcboxNonSmoking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcboxNonSmokingActionPerformed(evt);
            }
        });

        jcmbboxCuisine.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcmbboxCuisine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcmbboxCuisineActionPerformed(evt);
            }
        });

        jLabel9.setText("Vrsta kuhinje:");

        jtableRestaurants.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(jtableRestaurants);

        btnRemoveFilters.setText("Ponisti sve filtere");
        btnRemoveFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFiltersActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jcboxPetsAllowed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcboxNonSmoking)
                        .addGap(0, 291, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcmbboxCuisine, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemoveFilters))
                            .addComponent(jtxtName))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcboxNonSmoking)
                    .addComponent(jcboxPetsAllowed))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jcmbboxCuisine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemoveFilters))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtNameKeyReleased
        showRestaurants(filterRestaurantsByName());
    }//GEN-LAST:event_jtxtNameKeyReleased

    private void jcboxNonSmokingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcboxNonSmokingActionPerformed
        showRestaurants(filterNonSmokingRestaurants());
    }//GEN-LAST:event_jcboxNonSmokingActionPerformed

    private void jcboxPetsAllowedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcboxPetsAllowedActionPerformed
        showRestaurants(filterPetsAllowedRestaurants());
    }//GEN-LAST:event_jcboxPetsAllowedActionPerformed

    private void jcmbboxCuisineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcmbboxCuisineActionPerformed
        showRestaurants(filterRestaurantsByCuisine());
    }//GEN-LAST:event_jcmbboxCuisineActionPerformed

    private void btnRemoveFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveFiltersActionPerformed
        this.jtxtName.setText("");
        this.jcboxNonSmoking.setSelected(false);
        this.jcboxPetsAllowed.setSelected(false);
        this.jcmbboxCuisine.setSelectedItem(Cuisine.Sve);
        showRestaurants(controller.getAllRestaurants());
    }//GEN-LAST:event_btnRemoveFiltersActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRemoveFilters;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox jcboxNonSmoking;
    private javax.swing.JCheckBox jcboxPetsAllowed;
    private javax.swing.JComboBox<String> jcmbboxCuisine;
    private javax.swing.JTable jtableRestaurants;
    private javax.swing.JTextField jtxtName;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() {
        loadCuisines();
        prepareRestaurantsTable();
    }

    private void loadCuisines() {
        ComboBoxModel model = new DefaultComboBoxModel(Cuisine.values());
        jcmbboxCuisine.setModel(model);
//        jcmbboxCuisine.setSelectedItem(Cuisine.Sve);
    }

    private void prepareRestaurantsTable() {
        List<Restaurant> restaurants = controller.getAllRestaurants();
        TableModelRestaurants model = new TableModelRestaurants(restaurants);
        jtableRestaurants.setModel(model);
    }

    public void showRestaurants(List<Restaurant> restaurants) {
        TableModelRestaurants model = (TableModelRestaurants) jtableRestaurants.getModel();
        model.setRestaurants(restaurants);
    }

    private List<Restaurant> filterRestaurantsByName() {
        String nameTyped = jtxtName.getText();
        return controller.filterByName(nameTyped);
    }

    private List<Restaurant> filterRestaurantsByCuisine() {
        Cuisine cuisine = (Cuisine) jcmbboxCuisine.getSelectedItem();
        return controller.filterByCuisine(cuisine);
    }

    private List<Restaurant> filterNonSmokingRestaurants() {
        boolean nonSmoking = jcboxNonSmoking.isSelected();
        return controller.filterNonSmoking(nonSmoking);
    }

    private List<Restaurant> filterPetsAllowedRestaurants() {
        boolean petsAllowed = jcboxPetsAllowed.isSelected();
        return controller.filterPetsAllowed(petsAllowed);
    }

}
